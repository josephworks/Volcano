#!/usr/bin/env bash

# get base dir regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" = /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")
gitcmd="git -c commit.gpgsign=false"
. $basedir/scripts/init.sh

case "$1" in
	"rb" | "rbp" | "rebuild")
	(
		set -e
		cd "$basedir"
		scripts/rebuildPatches.sh "$basedir"
	)
	;;
	"p" | "patch" | "apply")
	(
		set -e
		cd "$basedir"
		scripts/applyPatches.sh "$basedir"
	)
	;;
	"b" | "bu" | "build")
	(
		basedir
		mvn -N install
		cd Volcano-API
		mvn clean install && cd ../Volcano-Server && mvn clean install
	)
	;;
	"d" | "de" | "deploy")
	(
		basedir
		mvn -N install
		cd Volcano-API
		mvn clean deploy && cd ../Volcano-Server && mvn clean install
	)
	;;
	"up" | "upstream")
	(
		cd "$basedir"
		scripts/upstreamMerge.py "$2"
	)
	;;
	"r" | "root")
		cd "$basedir"
	;;
	"a" | "api")
		cd "$basedir/Volcano-API"
	;;
	"s" | "server")
		cd "$basedir/Volcano-Server"
	;;
	"j" | "jar")
		cd "$basedir"
		scripts/build.sh "$basedir" "--jar"
	;;
	"e" | "edit")
        source "$basedir/scripts/functions.sh"
        case "$2" in
            "s" | "server")
            export PAPER_LAST_EDIT="$basedir/Volcano-Server"
            cd "$basedir/Volcano-Server"
            (
                set -e

                volcanostash
                $gitcmd rebase -i upstream/upstream
                voclanounstash
            )
            ;;
            "a" | "api")
            export VOLCANO_LAST_EDIT="$basedir/Volcano-API"
            cd "$basedir/Volcano-API"
            (
                set -e

                volcanostash
                $gitcmd rebase -i upstream/upstream
                volcanounstash
            )
            ;;
            "c" | "continue")
            cd "$VOLCANO_LAST_EDIT"
            unset VOLCANO_LAST_EDIT
            (
                set -e

                $gitcmd add .
                $gitcmd commit --amend
                $gitcmd rebase --continue

                cd "$basedir"
                scripts/rebuildPatches.sh "$basedir"
            )
            ;;
            *)
                echo "You must edit either the api or server."
            ;;
        esac
    ;;
	*)
		echo "Volcano build tool command. This provides a variety of commands to build and manage the Volcano build"
		echo "environment. View below for details."
		echo ""
		echo " Normal commands:"
		echo "  * rb, rebuild  | Rebuild patches, can be called from anywhere."
		echo "  * p, patch     | Apply all patches to top of Paper without building it. Can be run from anywhere."
		echo "  * up, upstream | Build Volcano upstream, pass arg up to update paper. Can be run from anywhere."
		echo "  * b, build     | Build API and Server but no deploy. Can be ran anywhere."
		echo "  * d, deploy    | Build and Deploy API jar and build Server. Can be ran anywhere."
		echo ""
		echo " These commands require the setup command before use:"
		echo "  * r, root      | Change directory to the root of the project."
		echo "  * a. api       | Move to the Volcano-API directory."
		echo "  * s, server    | Move to the Volcano-Server directory."
		echo "  * e, edit      | Use to edit a specific patch, give it the argument \"server\" or \"api\""
		echo "                 | respectively to edit the correct project. Use the argument \"continue\" after"
		echo "                 | the changes have been made to finish and rebuild patches. Can be called from anywhere."
	;;
esac

unset -f paperstash
unset -f paperunstash
